#!/usr/bin/env python3

# File: bioPipe
# Author: Harrison Inocencio
# Date: 07-17-18
# Purpose: contains the bioPipe class, which is the top level class
#		   and can be used to run the pipeline. Executing this script
#		   will start the pipeline

# Usage: Can be executed as a script

# Notes:
# 1. # Descriptive comment
# 2. ## Debug print comment
# 3. ### Needs to be uncommented before completion
# 4.
# 5.

# TODO:
# 1. Fix hardcoding! (Not just in this script either)
# 2.
# 3.
# 4.
# 5.

# -------------------------------------------------------------------

import os
import args
import plumber
from readFile import readFile
from readBall import readBall

# bioPipe class
class bioPipe:
	"""
	bioPipe class calls all other classes, and is the top level
	object for the pipeline. Can be run directly to execute the pipeline

	ATRS:
		PRE-RUN
		target_dir = dir containing reads
		output_dir = output directory

		ON-RUN
		read_pit = master list of readBall objects

	"""

	# __init__ func
	# sets attributes to arguments specified in arg_dic
	def __init__(self, arg_dic):
		self.target_dir = arg_dic.read_dir
		self.output_dir = arg_dic.output_dir
		self.trim_args = arg_dic.trim_args
	
	# __run_init func
	# inits a pipe run, checks dirs, mks output dir, return fastq list
	def __run_init(self):
		# Add terminal backslash to dirs if absent
		if self.target_dir[-1] != "/":
			self.target_dir+="/"
		if self.output_dir[-1] != "/":
			self.output_dir+="/"

		# Mk output dir (remove directory if exists)
		### plumber.force_dir(self.output_dir)

		# Return fastq list
		fastq_list = []
		for item in os.listdir(self.target_dir):
			if ".fastq" in item:
				fastq_list.append(self.target_dir+item)

		return fastq_list

	# __mass_merge func
	# Calls the 'merge' function for each readBall in the master_list
	def __mass_merge(self):
		merge_dir = self.output_dir+args.merge_dir
		plumber.force_dir(merge_dir)
		for rball in self.read_pit:
			rball.merge_ball(merge_dir)

	# __mass_trim func
	# Calls 'trim' for each readBall. Only run as a secondary step if 
	# the args specify for it
	def __mass_trim(self):
		trim_dir = self.output_dir+args.trim_dir
		plumber.force_dir(trim_dir)
		#for rball in self.read_pit:
		#	rball.trim(trim_dir, self.trim_args)

	# run func
	# Starts the pipe
	def run(self):
		fastq_list = self.__run_init()
		self.read_pit = plumber.build_read_pit(fastq_list)
		### self.__mass_merge()
		if self.trim_args != None:
			self.__mass_trim()
		print("done")

# main func
# Called when file is executed instead of imported
def main():
	arg_dic = args.parse()
	pipe = bioPipe(arg_dic)
	pipe.run()

if __name__ == '__main__':
	main()
