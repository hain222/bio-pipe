#!/usr/bin/env python3

# File: bioPipe
# Author: Harrison Inocencio
# Date: 07-17-18
# Purpose: contains the bioPipe class, which is the top level class
#		   and can be used to run the pipeline. Executing this script
#		   will start the pipeline

# Usage: Can be executed as a script

# Notes:
# 1. # Descriptive comment
# 2. ## Debug print comment
# 3. ### Needs to be uncommented before completion
# 4.
# 5.

# TODO:
# 1. Fix hardcoding! (Not just in this script either)
# 2.
# 3.
# 4.
# 5.

# -------------------------------------------------------------------

import os
import lib.args as args
import lib.plumber as plumber
from lib.readFile import readFile
from lib.readBall import readBall
from lib.sampleBall import sampleBall

# bioPipe class
class bioPipe:
	"""
	bioPipe class calls all other classes, and is the top level
	object for the pipeline. Can be run directly to execute the pipeline

	ATRS:
		PRE-RUN
		target_dir = dir containing reads
		output_dir = output directory

		ON-RUN
		read_pit = master list of readBall objects

	"""

	# __init__ func
	# sets attributes to arguments specified in arg_dic
	def __init__(self, arg_dic):
		self.target_dir = arg_dic.read_dir
		self.output_dir = arg_dic.output_dir
		self.trim_args = arg_dic.trim_args
		self.key_file = arg_dic.key_file
		self.vkmer_args = arg_dic.velvet_kmer_args
			
	# __run_init func
	# inits a pipe run, checks dirs, mks output dir, return fastq list
	def __run_init(self):
		# Add terminal backslash to dirs if absent
		if self.target_dir[-1] != "/":
			self.target_dir+="/"
		if self.output_dir[-1] != "/":
			self.output_dir+="/"
		
		# Return fastq list
		fastq_list = []
		for item in os.listdir(self.target_dir):
			if ".fastq" in item:
				fastq_list.append(self.target_dir+item)

		return fastq_list

	# __mass_merge func
	# Calls the 'merge' function for each readBall in the master_list
	def __mass_merge(self):
		merge_path = self.output_dir+args.merge_dir
		print("\tMerge path set to", merge_path)
		plumber.force_dir(merge_path)
		for rball in self.read_pit:
			print("\t\tMerging sample %s ..." % rball.sample_id)
			rball.merge_ball(merge_path)

	# __mass_trim func
	# Calls 'trim' for each readBall. Only run as a secondary step if 
	# the args specify for it
	def __mass_trim(self):
		trim_path = self.output_dir+args.trim_dir
		print("\tTrim path set to", trim_path)
		print("\tTrim args set to \"%s\"" % self.trim_args)
		plumber.force_dir(trim_path)
		for rball in self.read_pit:
			print("\t\tTrimming sample %s ..." % rball.sample_id)
			rball.trim_ball(trim_path, self.trim_args)

	# __mass_interleave func
	# Calls 'interleave' for each readBall, setting the inter_rf atr
	# For use in the assembly step
	def __mass_interleave(self):
		inter_path = self.output_dir+args.inter_dir
		print("\tInterleave path set to", inter_path)
		plumber.force_dir(inter_path)
		for rball in self.read_pit:
			print("\t\tInterleaving sample %s ..." % rball.sample_id)
			rball.interleave(inter_path)

	# __mass_assemble func
	# Calls 'assemble' for each sampleBall in the sample_pit, setting the
	# associated assemble atrs in the sampleBall
	def __mass_assemble(self):
		assemble_path = self.output_dir+args.assemble_dir
		print("\tAssembly path set to", assemble_path)
		plumber.force_dir(assemble_path)
		for sball in self.sample_pit:
			print("\t\tAssembling sample %s ..." % sball.sample_id)
			sball.assemble(assemble_path, self.vkmer_args)

	# run func
	# Starts the pipe
	def run(self):
		print("Beginning Pipe ...")
		print("Initializing ...")
		plumber.force_dir(self.output_dir)
		fastq_list = self.__run_init()
		print("Building Pit ...")
		self.read_pit = plumber.build_read_pit(fastq_list)
		print("Beginning Merges ...")
		self.__mass_merge()
		# Trim if called
		if self.trim_args != None:
			print("Trim called, beginning trims ...")
			self.__mass_trim()
		print("Beginning interleaves ...")
		self.__mass_interleave()	

'''	
		test_rfs1 = [readFile("test_out/trimmed/4560-S1_trimmed/4560-S1_S1_all_R1_paired.fastq")]
		test_rfs2 = [readFile("test_out/trimmed/4560-S2_trimmed/4560-S2_S2_all_R1_paired.fastq")]
		trball1 = readBall(test_rfs1)
		trball2 = readBall(test_rfs2)
		trball1.inter_rf = readFile("test_out/interleaved/4560-S1_S1_all_interleaved_001.fastq")
		trball2.inter_rf = readFile("test_out/interleaved/4560-S2_S2_all_interleaved_001.fastq")
'''

		#self.read_pit = [trball1, trball2]
		#for ball in self.read_pit:
		#	ball.tprint()

		# Create the sample dolly from the processed read pit
		# sample_pit contains sampleBalls, which contain all the atr
		# and functionalites needed for operations post-read processing
		self.sample_pit = []
		for rball in self.read_pit:
			self.sample_pit.append(sampleBall(rball, self.key_file))

		#for sball in self.sample_pit:
		#	sball.tprint()
		
		print("Beginning assemlies ...")
		self.__mass_assemble()

		print("Closing Pipe ...")

# main func
# Called when file is executed instead of imported
def main():
	arg_dic = args.parse()
	pipe = bioPipe(arg_dic)
	pipe.run()

if __name__ == '__main__':
	main()
